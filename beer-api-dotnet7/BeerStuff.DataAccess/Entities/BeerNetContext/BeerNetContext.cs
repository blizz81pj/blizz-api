// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using BeerStuff.DataAccess.Entities.BeerNetContext.Models;
using MySql.EntityFrameworkCore.Extensions;

namespace BeerStuff.DataAccess.Entities.BeerNetContext
{
    public partial class BeerNetContext : DbContext
    {
        public BeerNetContext()
        {
        }

        public BeerNetContext(DbContextOptions<BeerNetContext> options)
            : base(options)
        {
        }

        public virtual DbSet<BeerAdjunct> BeerAdjunct { get; set; }
        public virtual DbSet<Models.BeerGrain> BeerGrain { get; set; }
        public virtual DbSet<BeerHop> BeerHop { get; set; }
        public virtual DbSet<BeerRecipe> BeerRecipe { get; set; }
        public virtual DbSet<BeerRecipeAdjunct> BeerRecipeAdjunct { get; set; }
        public virtual DbSet<BeerRecipeGrain> BeerRecipeGrain { get; set; }
        public virtual DbSet<BeerRecipeHop> BeerRecipeHop { get; set; }
        public virtual DbSet<BeerRecipeMashStep> BeerRecipeMashStep { get; set; }
        public virtual DbSet<BeerRecipeNote> BeerRecipeNote { get; set; }
        public virtual DbSet<BeerRecipeYeast> BeerRecipeYeast { get; set; }
        public virtual DbSet<BeerYeast> BeerYeast { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BeerAdjunct>(entity =>
            {
                entity.ForMySQLHasCollation("utf8mb4_0900_ai_ci");
                entity.ForMySQLHasCharset("utf8mb4");

                entity.ToTable("beer_adjunct");

                entity.Property(e => e.BeerAdjunctId).HasColumnName("beer_adjunct_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.Notes)
                    .HasMaxLength(255)
                    .HasColumnName("notes");

                entity.Property(e => e.RowCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("row_created")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.RowModified)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("row_modified")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");
            });

            modelBuilder.Entity<Models.BeerGrain>(entity =>
            {
                entity.ForMySQLHasCollation("utf8mb4_0900_ai_ci");
                entity.ForMySQLHasCharset("utf8mb4");

                entity.HasKey(e => new { e.BeerGrainId, e.Name })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.ToTable("beer_grain");

                entity.Property(e => e.BeerGrainId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("beer_grain_id");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.Lovibond).HasColumnName("lovibond");

                entity.Property(e => e.Manufacturer)
                    .HasMaxLength(50)
                    .HasColumnName("manufacturer");

                entity.Property(e => e.PotentialGravity)
                    .HasPrecision(10, 3)
                    .HasColumnName("potential_gravity");

                entity.Property(e => e.RowCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("row_created")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.RowModified)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("row_modified")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");
            });

            modelBuilder.Entity<BeerHop>(entity =>
            {
                entity.ForMySQLHasCollation("utf8mb4_0900_ai_ci");
                entity.ForMySQLHasCharset("utf8mb4");

                entity.ToTable("beer_hop");

                entity.Property(e => e.BeerHopId).HasColumnName("beer_hop_id");

                entity.Property(e => e.AlphaAcid)
                    .HasPrecision(10, 2)
                    .HasColumnName("alpha_acid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.RowCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("row_created")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.RowModified)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("row_modified")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");
            });

            modelBuilder.Entity<BeerRecipe>(entity =>
            {
                entity.ForMySQLHasCollation("utf8mb4_0900_ai_ci");
                entity.ForMySQLHasCharset("utf8mb4");

                entity.ToTable("beer_recipe");

                entity.Property(e => e.BeerRecipeId).HasColumnName("beer_recipe_id");

                entity.Property(e => e.AlcoholByVolume)
                    .HasPrecision(10, 2)
                    .HasColumnName("alcohol_by_volume");

                entity.Property(e => e.BatchSize)
                    .HasPrecision(10, 2)
                    .HasColumnName("batch_size");

                entity.Property(e => e.FinalGravity)
                    .HasPrecision(10, 2)
                    .HasColumnName("final_gravity");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("name");

                entity.Property(e => e.OriginalGravity)
                    .HasPrecision(10, 2)
                    .HasColumnName("original_gravity");

                entity.Property(e => e.RowCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("row_created")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.RowModified)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("row_modified")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.TargetGravity)
                    .HasPrecision(10, 2)
                    .HasColumnName("target_gravity");
            });

            modelBuilder.Entity<BeerRecipeAdjunct>(entity =>
            {
                entity.ForMySQLHasCollation("utf8mb4_0900_ai_ci");
                entity.ForMySQLHasCharset("utf8mb4");

                entity.ToTable("beer_recipe_adjunct");

                entity.HasIndex(e => e.BeerAdjunctId, "beer_adjunct_id");

                entity.HasIndex(e => e.BeerRecipeId, "beer_recipe_id");

                entity.Property(e => e.BeerRecipeAdjunctId).HasColumnName("beer_recipe_adjunct_id");

                entity.Property(e => e.Amount)
                    .HasPrecision(10, 2)
                    .HasColumnName("amount");

                entity.Property(e => e.AmountUnit)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("amount_unit");

                entity.Property(e => e.BeerAdjunctId).HasColumnName("beer_adjunct_id");

                entity.Property(e => e.BeerRecipeId).HasColumnName("beer_recipe_id");

                entity.Property(e => e.Notes)
                    .HasMaxLength(255)
                    .HasColumnName("notes");

                entity.Property(e => e.RowCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("row_created")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.RowModified)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("row_modified")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.HasOne(d => d.BeerAdjunct)
                    .WithMany(p => p.BeerRecipeAdjunct)
                    .HasForeignKey(d => d.BeerAdjunctId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("beer_recipe_adjunct_ibfk_2");

                entity.HasOne(d => d.BeerRecipe)
                    .WithMany(p => p.BeerRecipeAdjunct)
                    .HasForeignKey(d => d.BeerRecipeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("beer_recipe_adjunct_ibfk_1");
            });

            modelBuilder.Entity<BeerRecipeGrain>(entity =>
            {
                entity.ForMySQLHasCollation("utf8mb4_0900_ai_ci");
                entity.ForMySQLHasCharset("utf8mb4");

                entity.ToTable("beer_recipe_grain");

                entity.HasIndex(e => e.BeerGrainId, "beer_grain_id");

                entity.HasIndex(e => e.BeerRecipeId, "beer_recipe_id");

                entity.Property(e => e.BeerRecipeGrainId).HasColumnName("beer_recipe_grain_id");

                entity.Property(e => e.Amount)
                    .HasPrecision(10, 2)
                    .HasColumnName("amount");

                entity.Property(e => e.BeerGrainId).HasColumnName("beer_grain_id");

                entity.Property(e => e.BeerRecipeId).HasColumnName("beer_recipe_id");

                entity.Property(e => e.RowCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("row_created")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.RowModified)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("row_modified")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.HasOne(d => d.BeerRecipe)
                    .WithMany(p => p.BeerRecipeGrain)
                    .HasForeignKey(d => d.BeerRecipeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("beer_recipe_grain_ibfk_1");
            });

            modelBuilder.Entity<BeerRecipeHop>(entity =>
            {
                entity.ForMySQLHasCollation("utf8mb4_0900_ai_ci");
                entity.ForMySQLHasCharset("utf8mb4");

                entity.ToTable("beer_recipe_hop");

                entity.HasIndex(e => e.BeerHopId, "beer_hop_id");

                entity.HasIndex(e => e.BeerRecipeId, "beer_recipe_id");

                entity.Property(e => e.BeerRecipeHopId).HasColumnName("beer_recipe_hop_id");

                entity.Property(e => e.Amount)
                    .HasPrecision(10, 2)
                    .HasColumnName("amount");

                entity.Property(e => e.BeerHopId).HasColumnName("beer_hop_id");

                entity.Property(e => e.BeerRecipeId).HasColumnName("beer_recipe_id");

                entity.Property(e => e.BoilMinute).HasColumnName("boil_minute");

                entity.Property(e => e.IsDryHop).HasColumnName("is_dry_hop");

                entity.Property(e => e.RowCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("row_created")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.RowModified)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("row_modified")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.HasOne(d => d.BeerHop)
                    .WithMany(p => p.BeerRecipeHop)
                    .HasForeignKey(d => d.BeerHopId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("beer_recipe_hop_ibfk_2");

                entity.HasOne(d => d.BeerRecipe)
                    .WithMany(p => p.BeerRecipeHop)
                    .HasForeignKey(d => d.BeerRecipeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("beer_recipe_hop_ibfk_1");
            });

            modelBuilder.Entity<BeerRecipeMashStep>(entity =>
            {
                entity.ForMySQLHasCollation("utf8mb4_0900_ai_ci");
                entity.ForMySQLHasCharset("utf8mb4");

                entity.ToTable("beer_recipe_mash_step");

                entity.HasIndex(e => e.BeerRecipeId, "beer_recipe_id");

                entity.Property(e => e.BeerRecipeMashStepId).HasColumnName("beer_recipe_mash_step_id");

                entity.Property(e => e.BeerRecipeId).HasColumnName("beer_recipe_id");

                entity.Property(e => e.Minutes).HasColumnName("minutes");

                entity.Property(e => e.RowCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("row_created")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.RowModified)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("row_modified")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.Temperature).HasColumnName("temperature");

                entity.HasOne(d => d.BeerRecipe)
                    .WithMany(p => p.BeerRecipeMashStep)
                    .HasForeignKey(d => d.BeerRecipeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("beer_recipe_mash_step_ibfk_1");
            });

            modelBuilder.Entity<BeerRecipeNote>(entity =>
            {
                entity.ForMySQLHasCollation("utf8mb4_0900_ai_ci");
                entity.ForMySQLHasCharset("utf8mb4");

                entity.ToTable("beer_recipe_note");

                entity.HasIndex(e => e.BeerRecipeId, "beer_recipe_id");

                entity.Property(e => e.BeerRecipeNoteId).HasColumnName("beer_recipe_note_id");

                entity.Property(e => e.BeerRecipeId).HasColumnName("beer_recipe_id");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("note");

                entity.Property(e => e.RowCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("row_created")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.RowModified)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("row_modified")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.HasOne(d => d.BeerRecipe)
                    .WithMany(p => p.BeerRecipeNote)
                    .HasForeignKey(d => d.BeerRecipeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("beer_recipe_note_ibfk_1");
            });

            modelBuilder.Entity<BeerRecipeYeast>(entity =>
            {
                entity.ForMySQLHasCollation("utf8mb4_0900_ai_ci");
                entity.ForMySQLHasCharset("utf8mb4");

                entity.ToTable("beer_recipe_yeast");

                entity.HasIndex(e => e.BeerRecipeId, "beer_recipe_id");

                entity.HasIndex(e => e.BeerYeastId, "beer_yeast_id");

                entity.Property(e => e.BeerRecipeYeastId).HasColumnName("beer_recipe_yeast_id");

                entity.Property(e => e.BeerRecipeId).HasColumnName("beer_recipe_id");

                entity.Property(e => e.BeerYeastId).HasColumnName("beer_yeast_id");

                entity.Property(e => e.RowCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("row_created")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.RowModified)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("row_modified")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.StarterGallons)
                    .HasPrecision(10, 2)
                    .HasColumnName("starter_gallons");

                entity.Property(e => e.StarterMaltExtractOunces)
                    .HasPrecision(10, 2)
                    .HasColumnName("starter_malt_extract_ounces");

                entity.HasOne(d => d.BeerRecipe)
                    .WithMany(p => p.BeerRecipeYeast)
                    .HasForeignKey(d => d.BeerRecipeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("beer_recipe_yeast_ibfk_1");

                entity.HasOne(d => d.BeerYeast)
                    .WithMany(p => p.BeerRecipeYeast)
                    .HasForeignKey(d => d.BeerYeastId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("beer_recipe_yeast_ibfk_2");
            });

            modelBuilder.Entity<BeerYeast>(entity =>
            {
                entity.ForMySQLHasCollation("utf8mb4_0900_ai_ci");
                entity.ForMySQLHasCharset("utf8mb4");

                entity.ToTable("beer_yeast");

                entity.Property(e => e.BeerYeastId).HasColumnName("beer_yeast_id");

                entity.Property(e => e.IsKettleSour).HasColumnName("is_kettle_sour");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.RowCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("row_created")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.RowModified)
                    .HasColumnType("datetime")
                    .ValueGeneratedOnAddOrUpdate()
                    .HasColumnName("row_modified")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}